/**
 * =====================================
 * ErrorPluginBaseElements ( thePlugInResult ; theErrorInfo )
 *
 * RETURNS:
 *		Let Notation containing information about the last PlugIn
 *		error and the environment it occurred in.
 *
 * PARAMETERS:
 *		thePlugInResult = (text) result of the PlugIn call
 *		theErrorInfo = (text, optional) some text describing the particular
 *			instance of this error. This should help a developer locate where
 *			in a script the error occured.
 *			(e.g., "create new invoice record")
 *
 * DEPENDENCIES:
 *		Custom Functions: #, Error
 *		Plugin: BaseElements
 *
 * HISTORY:
 *		MODIFIED on 2014-05-29 by Daniel Smith dansmith65@gmail.com
 *			- use BE_GetLastError as code, if it's numeric
 *			- fix test for plugin not installed
 *		CREATED on 2014-01-22 by Daniel Smith dansmith65@gmail.com
 *
 * REFERENCES:
 *		http://filemakerstandards.org/x/AoA-/
 * =====================================
 */

Let ( [
	~pluginInternalErrorCode = BE_GetLastError ;
	~isError =
		thePlugInResult = "?"
		or ~pluginInternalErrorCode ≠ 0
	;
	~theErrorCode =
		Case (
		// no error
			not ~isError ;
			0 ;
		// plug-in not available
			~pluginInternalErrorCode = "?" ;
			10000 ;
		// if ~pluginInternalErrorCode is numeric, use it
			GetAsNumber ( ~pluginInternalErrorCode ) = ~pluginInternalErrorCode ;
			~pluginInternalErrorCode
		// else, use "unknown" code
			-1
		)
	;
	~errorDescription =
		Case (
			~theErrorCode = -1 ;		"Unknown error" ;
			~theErrorCode = 0 ;		"No error" ;
			~theErrorCode = 10000 ;		"BaseElements plug-in is not available" ;
		// else:
		// BaseElements does not have a text description to go with it's error codes
		// but some functions return error info
			If ( thePlugInResult ≠ "?" and thePlugInResult ≠ 0 and not IsEmpty ( thePlugInResult ) ;
				thePlugInResult ;
				"no description available"
			)
		)
] ;
	Error ( "Plugin: BaseElements" ; ~theErrorCode ; ~errorDescription ; theErrorInfo )
	& If ( ~isError ;
		# ( "plugInResult" ; thePlugInResult )
		& # ( "BE_GetLastError" ; BE_GetLastError )
		& # ( "BE_GetLastDDLError" ; BE_GetLastDDLError )
		& # ( "BE_JSON_Error_Description" ; BE_JSON_Error_Description )
	)
	& If ( ~theErrorCode = 10000 ;
		# ( "InstalledFMPlugins" ; Get ( InstalledFMPlugins ) )
	)
)