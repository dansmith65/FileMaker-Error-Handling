/**
 * =====================================
 * ErrorApp ( theErrorCode ; theErrorInfo )
 *
 * RETURNS:
 *		Let format dictionary containing theErrorCode, error meta data, and
 *		additional environmental data.
 *
 * PARAMETERS:
 *		theErrorCode = (number) code for the error
 *		theErrorInfo = (text, optional) some text describing the particular
 *			instance of this error.
 *			(e.g., "create new invoice record")
 *
 * DEPENDENCIES:
 *		Custom Functions: Error
 *
 * HISTORY:
 *		MODIFIED on 2019-MAY-30 by Daniel Smith dan@filemaker.consulting
 *			- update to use codes from ErrorApp from 2018-NOV-15
 *		MODIFIED on 2018-JUN-01 by Daniel Smith dan@filemaker.consulting
 *			- convert to JSON result
 *		MODIFIED on 2017-DEC-31 by Daniel Smith dan@filemaker.consulting
 *			- add code 19: Invalid script result
 *		MODIFIED on 2014-DEC-12 by Daniel Smith dansmith65@gmail.com
 *			- add additional data for 6, 10, 11
 *			- separate deprecated functions
 *		MODIFIED on 2013-NOV-07 by Daniel Smith dansmith65@gmail.com
 *			- added errorCode 18 Invalid found count
 *		MODIFIED on 2013-OCT-11 by Daniel Smith dansmith65@gmail.com
 *			- change from ErrorDataApp ( theErrorCode )
 *			  to #AppError ( theErrorCode ; theErrorInfo )
 *			- add dependency on custom function: #Error
 *		MODIFIED on 2012-NOV-26 by Daniel Smith dansmith65@gmail.com
 *			- add errorCode 17: ExecuteSQL error
 *		MODIFIED on 2012-NOV-22 by Daniel Smith dansmith65@gmail.com
 *			- rename to: ErrorDataApp
 *		MODIFIED on 2012-NOV-21 by Daniel Smith dansmith65@gmail.com
 *			- don't access $error variable directly
 *		CREATED on 2012-NOV-20 Daniel Smith dansmith65@gmail.com
 *		INSPIRED by ErrorString and ErrorData by matt@filemakermagazine.com
 *			https://github.com/filemakerstandards/fmpstandards/tree/master/Functions
 *
 * REFERENCES:
 *		https://github.com/dansmith65/FileMaker-Error-Handling
 * =====================================
 */

Let ( [
	// Get human-readable error string associated with the error
	// Also add additional information about the environment that is uniqe to the error code
	errorDescription = 
		Case (
			theErrorCode = 0 ;  	"No error" ;
			theErrorCode = 1 ;  	"User canceled action" ;
			theErrorCode = 2 ;  	"Invalid Parameter" ; /* Missing or malformed, so if a date is expected but script received a turtle, parameter is invalid. */
			theErrorCode = 3 ;  	"Failed Validation" ; /* Any general-purpose validation that doesn't fit into another more-specific error code. */
			theErrorCode = 6 ;  	"Invalid window mode" ;
			theErrorCode = 10 ; 	"Incompatible FileMaker version" ; /* Sometimes we offer a feature or two that doesn't run on the lowest supported client version. In that case, this error could be used to only allow supported clients to run the code. An example of this is the Export All script. */
			theErrorCode = 11 ; 	"Incompatible FileMaker application" ; /* Might use if FMGo is required for a GPS location based function, but the feature was run from FMPro. */
			theErrorCode = 13 ; 	"Script Error" ; /* I often wonder if I should use this code, or Failed Validation code 3. I think there are subtle differences, though. Let's say a script set a variable to the value of "a", "b" or "c", then later tested which value it was. I would throw this code in an Else since the same script set the code, so there is just some internal error that isn't because of a parameter. It might be able to be called validation error, but the script itself is what was invalid, so I use this code.*/
			theErrorCode = 16 ; 	"Plug-In error" ; /* Use when a plugin doesn't have a specific error handling function (which set's the type to the plugin name) */
			theErrorCode = 17 ; 	"ExecuteSQL error" ;
			theErrorCode = 19 ; 	"Invalid script result" ; /* Set by #AssignScriptResultAndSetError script. Yes, it's basically like code 2, but for script results. You could also use it when translating a module's result to our standard, and that process fails. */
			
			/* DEPRECATED */
			theErrorCode = 4 ;  	"No records found" ;
			theErrorCode = 5 ;  	"No records selected" ;
			theErrorCode = 7 ; 	"FileMaker Error" ; /* use fmp error type instead */
			theErrorCode = 8 ; 	"Invalid Plug-In" ;
			theErrorCode = 9 ; 	"Subscript Error" ; /* don't modify error code; just add the current script name to the script stack */
			theErrorCode = 12 ;	"Record is in use by another user (FileMaker error 301)" ;
			theErrorCode = 14 ; 	"Access error: get(RecordAccess) was 0" ;
			theErrorCode = 15 ; 	"Access error: get(LayoutAccess) was 0" ;
			theErrorCode = 18 ; 	"Invalid found count" ;
			
			"Unknown error code"
		)
	;
	~error = Error ( "app" ; theErrorCode ; errorDescription ; theErrorInfo )
] ;
	Case (
		theErrorCode = 0 ;
		~error ;

		theErrorCode = 6 ;
		JSONSetElement ( ~error ;
			[ "WindowMode" ; Get ( WindowMode ) ; JSONString ]
		) ;

		theErrorCode = 10 or theErrorCode = 11 ;
		JSONSetElement ( ~error ;
			[ "ApplicationVersion" ; Get ( ApplicationVersion ) ; JSONString ]
		) ;

		theErrorCode = 18 ;
		JSONSetElement ( ~error ;
			[ "FoundCount" ; Get ( FoundCount ) ; JSONString ]
		) ;

		~error
	)
)