/**
 * =====================================
 * ErrorAppIf ( theCondition ; theErrorCode ; theErrorInfo )
 *
 * PURPOSE:
 *		Save JSON error information to $error and return a Boolean result.
 *
 * RETURNS:
 *		GetAsBoolean ( theCondition )
 *
 * PARAMETERS:
 *		theCondition | True or False
 *		theErrorCode | (number) code for the error
 *		theErrorInfo = (text, optional) some text describing the particular instance of this error.
 *			This should help a developer locate where in a script the error occurred.
 *			(e.g., "create new invoice record")
 *
 * DEPENDENCIES:
 *		Custom Functions: Error
 *
 * HISTORY:
 *		2024-APR-12 Daniel Smith dan@filemaker.consulting
 *			- created based on various old iterations of the same basic function
 *			- some of those iterations by Joshua Willing josh@willingapps.com
 * =====================================
 */

If ( not theCondition ;
	If ( $error â‰  "{}" ;
		Let ( $error = "{}" ; False ) ;
		False
	) ;

	Let ( [
		// Get human-readable error string associated with the error
		// Also add additional information about the environment that is uniqe to the error code
		~errorDescription = 
			Case (
				theErrorCode = 0 ;  	"No error" ;
				theErrorCode = 1 ;  	"User canceled action" ;
				theErrorCode = 2 ;  	"Invalid Parameter" ; /* Missing or malformed, so if a date is expected but script received a turtle, parameter is invalid. */
				theErrorCode = 3 ;  	"Failed Validation" ; /* Any general-purpose validation that doesn't fit into another more-specific error code. */
				theErrorCode = 6 ;  	"Invalid window mode" ;
				theErrorCode = 10 ; 	"Incompatible FileMaker version" ; /* Sometimes we offer a feature or two that doesn't run on the lowest supported client version. In that case, this error could be used to only allow supported clients to run the code. An example of this is the Export All script. */
				theErrorCode = 11 ; 	"Incompatible FileMaker application" ; /* Might use if FMGo is required for a GPS location based function, but the feature was run from FMPro. */
				theErrorCode = 13 ; 	"Script Error" ; /* I often wonder if I should use this code, or Failed Validation code 3. I think there are subtle differences, though. Let's say a script set a variable to the value of "a", "b" or "c", then later tested which value it was. I would throw this code in an Else since the same script set the code, so there is just some internal error that isn't because of a parameter. It might be able to be called validation error, but the script itself is what was invalid, so I use this code.*/
				theErrorCode = 16 ; 	"Plug-In error" ; /* Use when a plugin doesn't have a specific error handling function (which set's the type to the plugin name) */
				theErrorCode = 17 ; 	"ExecuteSQL error" ;
				theErrorCode = 19 ; 	"Invalid script result" ; /* Set by ErrorScriptResultIfError script. It's like code 2, but for script results. You could also use it when translating a module's result and that process fails. */

				"Unknown error code"
			)
		;
		~error = Error ( "App" ; theErrorCode ; ~errorDescription ; theErrorInfo ) ;
		$error =
			Case (
				// add additional info useful for debugging specific errors...

				theErrorCode = 6 ;
				JSONSetElement ( ~error ;
					[ "WindowMode" ; Get ( WindowMode ) ; JSONString ]
				) ;

				theErrorCode = 10 or theErrorCode = 11 ;
				JSONSetElement ( ~error ;
					[ "ApplicationVersion" ; Get ( ApplicationVersion ) ; JSONString ]
				) ;

				theErrorCode = 18 ;
				JSONSetElement ( ~error ;
					[ "FoundCount" ; Get ( FoundCount ) ; JSONString ]
				) ;

				/* else */
				~error
			)
	] ; True )
)