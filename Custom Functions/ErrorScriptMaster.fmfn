/**
 * =====================================
 * ErrorScriptMaster ( thePlugInResult ; theErrorInfo )
 *
 * RETURNS:
 *		Let format dictionary containing an error code, error meta data, and
 *		additional environmental data.
 *
 * PARAMETERS:
 *		thePlugInResult = (text) result of the call to ScriptMaster module
 *		theErrorInfo = (text, optional) some text describing the particular
 *			instance of this error.
 *			(e.g., "create new invoice record")
 *
 * DEPENDENCIES:
 *		Custom Functions: #, #Error
 *
 * HISTORY:
 *		CREATED on 2013-NOV-14 Daniel Smith dansmith65@gmail.com
 * =====================================
 */

Let ( [
	~isError = thePlugInResult = "ERROR" or not IsEmpty ( SMLastError ) ;
	~theErrorCode =
		Case (
		// no error
			not ~isError ;
			0 ;
		// map known responses to numeric coded values
//			SMLastError = "some known response" ;
//			1 ;
		// else, use "unknown" code
			-1
		)
	;
	~errorDescription =
		Case (
			~theErrorCode = 0 ;
			"no error" ;
		// else
			SMLastError
		)
] ;
	Error ( "ScriptMaster" ; ~theErrorCode ; ~errorDescription ; theErrorInfo )
	& If ( ~isError ;
		# ( "plugInResult" ; thePlugInResult )
		& # ( "SMLastError" ; SMLastError )
		& # ( "SMLastStackTrace" ; SMLastStackTrace )
		& # ( "SMGetRegisteredModules" ; SMGetRegisteredModules )
		& # ( "SMGetLoadedJars" ; SMGetLoadedJars )
	)
)