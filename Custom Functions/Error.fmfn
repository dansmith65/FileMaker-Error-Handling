/**
 * =====================================
 * Error ( theErrorType ; theErrorCode ; theErrorDescription ; theErrorInfo )
 *
 * RETURNS: (JSON Object)
 *		Containing information about the error and the environment it occurred in.
 *
 * PARAMETERS:
 *		theErrorType | (text) origin of the error
 *			(e.g., "Fmp", "App", "Plugin: BaseElements", "Module: PluginChecker", etc.)
 *		theErrorCode | (number) code for the error
 *		theErrorDescription | (text) description of the error, preferably human readable and
 *			decipherable. For origin's like FileMaker, this should be the generic message the code
 *			maps to. Some origin's don't have such generic messages, in which case this can be used
 *			in place of theErrorInfo parameter, since theErrorDescription _should not be empty_.
 *		theErrorInfo | (text, optional) some text describing the particular instance of this error.
 *
 * NOTE:
 *		This function contains a recommended set of environmental data, but you may choose to add
 *		or remove from this function as you see fit for your solution. All error generating custom
 *		functions call this function, so it is the central place to define default environmental
 *		data collected when an error occurs, as long as it applies to all error types.
 *
 *		Environmental data that is likely to change from the time the error occurs to the time log
 *		data is collected should be included in this function.
 *
 * REFERENCES:
 *		https://github.com/dansmith65/FileMaker-Error-Handling
 *
 * HISTORY:
 *		2024-APR-12 Daniel Smith dan@filemaker.consulting
 *			- created based on various old iterations of the same basic function
 * =====================================
 */

If ( not theErrorCode ;
	/* lightweight response when no error */
	"{}" ;

	JSONSetElement ( "{}" ;
		// information about the error
		// these should NOT be modified, they should be consistent from one database to the next
		[ "errorCode" ; theErrorCode ; JSONNumber ] ;
		[ "errorType" ; theErrorType ; JSONString ] ;
		[ "errorDescription" ; theErrorDescription ; JSONString ] ;
		[ "errorInfo" ; theErrorInfo ; JSONString ] ;

		// information about the environment
		// these values should be adjusted as needed for the database
		[ "ScriptName" ; Get ( ScriptName ) ; JSONString ] ;
		[ "ScriptParameter" ; Get ( ScriptParameter ) ;
			If ( Left ( JSONFormatElements ( Get ( ScriptParameter ) ) ; 1 ) = "{" ; JSONObject ; JSONString )
		] ;
		[ "ScriptResult" ; Get ( ScriptResult ) ;
			If ( Left ( JSONFormatElements ( Get ( ScriptResult ) ) ; 1 ) = "{" ; JSONObject ; JSONString )
		] ;
		[ "CurrentTimeUTCMilliseconds" ; Get ( CurrentTimeUTCMilliseconds ) ; JSONString ] ;
		[ "~script.section" ; $~script.section ; JSONString ]
	)
)