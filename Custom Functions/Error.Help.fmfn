/**
 * =====================================
 * Error.Help ( emptyOrTopic )
 *
 * PURPOSE:
 *		Provide in-app help for this suite of custom functions.
 *		Meant to be called from the data viewer.
 *
 * RETURNS: (text)
 *
 * PARAMETERS:
 *		emptyOrTopic = (text) the topic to get help with; see code below for valid values
 *
 * REFERENCES:
 *		Full documentation can be found at https://github.com/dansmith65/FileMaker-Error-Handling.
 *		Either [the entire license](https://github.com/dansmith65/FileMaker-Error-Handling/blob/master/LICENSE)
 *		or this sentence shall be included in all copies or substantial portions of the Software.
 *
 * NOTE:
 *		This function is named differently than other functions so it sorts at the top of this group of functions.
 *
 * HISTORY:
 *		2024-JUL-08 Daniel Smith dan@filemaker.consulting
 *			- created with advice from Cristos Lianides-Chin and Jody Barney
 * =====================================
 */

Let ( [
	shortSummary = /* "Short Summary" section of main README: */
		"## Short Summary of Functions¶¶All `ErrorIf*` functions will save error data to a local variable and return `True` if the error code is Truthy.¶¶`ErrorFound` returns `True` if an error was saved with an `ErrorIf*` function.¶¶`ErrorGet*` functions will retrieve info from a saved error.¶¶`ErrorIfSetCustomElement` will save additional info with the error and return `True` if an error had already been saved or `False` if it wasn't. This allows you to call it in the same expression as an `ErrorIf*` function. For example:¶¶```¶ErrorIfFmpLastError ( \"Insert from URL\" )¶and ErrorIfSetCustomElement ( \"url\" ; $url ; JSONString )¶```¶¶For further reading, the [Custom Function Overview](./Custom%20Functions/README.md) lists all the functions and their documentation.¶¶Better yet, open the [FileMaker-Error-Handling.fmp12](FileMaker-Error-Handling.fmp12) file for real-world(ish) examples of how I use these functions. As an added bonus, I integrated with an API in a way that I consider a best practice for doing so. If you want to, or have ever integrated with an API; you might want to review the scripts in this file just for that reason."
	;
	app = /* App codes, messages, and explanation of when to use them, followed by the date they were updated */
		"theCode = 0 ;  	\"No error\" ;¶¶theCode = 1 ;  	\"User canceled action\" ;¶¶theCode = 2 ;  	\"Invalid parameter\" ;¶	/* Missing or malformed; so if a date is expected but script received a turtle. */¶¶theCode = 3 ;  	\"Failed validation\" ;¶	/* Any general-purpose validation that doesn't fit into another more-specific error code. */¶¶theCode = 6 ;  	\"Invalid window mode\" ;¶¶theCode = 10 ; 	\"Incompatible FileMaker version\" ;¶	/* Sometimes we offer a feature or two that doesn't run on the lowest supported client version.¶	   In that case, this error could be used to only allow supported clients to run the code. */¶¶theCode = 11 ; 	\"Incompatible FileMaker application\" ;¶	/* Might use if FMGo is required for a GPS location based function, but the¶	   feature was run from FMPro. */¶¶theCode = 13 ; 	\"Script error\" ;¶	/* I often wonder if I should use this code, or Failed Validation code 3. I think there are¶	   subtle differences, though. Let's say a script set a variable to the value of \"a\", \"b\" or \"c\",¶	   then later tested which value it was. I would throw this code in an `Else` since the same¶	   script set the variable, so there is just some internal error that isn't because of a¶	   parameter. It might be able to be called validation error, but the script itself is what was¶	   invalid, so I use this code.*/¶¶theCode = 16 ; 	\"Plug-In error\" ;¶	/* Use when a plugin doesn't have a specific error handling function¶	   (which set's the type to the plugin name) */¶¶theCode = 17 ; 	\"ExecuteSQL error\" ;¶¶theCode = 19 ; 	\"Invalid script result\" ;¶	/* Set by ErrorIfScriptResult function. It's like code 2, but for script results.¶	   You could also use it when translating a module's result and that process fails. */¶¶theCode = 20 ;  \"Pardon our dust. This feature is not yet available.\" ;¶¶¶(current as of 2024-JUL-08)"
	;
	functions = /* Entire readme from Custom Functions folder */
		"# Custom Function Overview¶¶- [Error.Help ( emptyOrTopic )](#errorhelp.fmfn)¶- [ErrorDescriptionFmp ( theCode )](#errordescriptionfmpfmfn)¶- [ErrorFound](#errorfoundfmfn)¶- [ErrorGetAsJSON](#errorgetasjsonfmfn)¶- [ErrorGetCode](#errorgetcodefmfn)¶- [ErrorGetCustomElement ( keyOrPath )](#errorgetcustomelementfmfn)¶- [ErrorGetMessage](#errorgetmessagefmfn)¶- [ErrorGetType](#errorgettypefmfn)¶- [ErrorIf ( theCondition ; theType ; theCode ; theMessage )](#erroriffmfn)¶- [ErrorIfApp ( theCondition ; theCode ; additionalTextInfo )](#errorifappfmfn)¶- [ErrorIfFmp ( theCode ; additionalTextInfo )](#erroriffmpfmfn)¶- [ErrorIfFmpLastError ( additionalTextInfo )](#erroriffmplasterrorfmfn)¶- [ErrorIfScriptResult ( theScriptName )](#errorifscriptresultfmfn)¶- [ErrorIfSetCustomElement ( keyOrPath ; value ; jsonType )](#errorifsetcustomelementfmfn)¶- [ErrorIfSetFromJSON ( theErrorObject )](#errorifsetfromjsonfmfn)¶¶¶## [Error.Help.fmfn](Error.Help.fmfn)¶¶```¶/**¶ * Error.Help ( emptyOrTopic )¶ *¶ * PURPOSE:¶ *		Provide in-app help for this suite of custom functions.¶ *		Meant to be called from the data viewer.¶ *¶ * RETURNS: (text)¶ *¶ * PARAMETERS:¶ *		emptyOrTopic = (text) the topic to get help with; see code below for valid values¶ *¶ */¶```¶¶## [ErrorDescriptionFmp.fmfn](ErrorDescriptionFmp.fmfn)¶¶```¶/**¶ * ErrorDescriptionFmp ( theCode )¶ *¶ * RETURNS: (text)¶ *		FileMaker's description associated with an error code.¶ *¶ * PARAMETERS:¶ *		theCode = (number) code for a FileMaker error¶ *¶ * DEPENDENCIES: none¶ *¶ */¶```¶¶## [ErrorFound.fmfn](ErrorFound.fmfn)¶¶```¶/**¶ * ErrorFound¶ *¶ * RETURNS: (boolean)¶ *		True if the private local variable contained an error, otherwise False¶ *¶ * DEPENDENCIES:¶ *		ErrorGetAsJSON, ErrorIf, ErrorIfSetCustomElement¶ *¶ */¶```¶¶## [ErrorGetAsJSON.fmfn](ErrorGetAsJSON.fmfn)¶¶```¶/**¶ * ErrorGetAsJSON¶ *¶ * PURPOSE:¶ *		Allows for returning an error in a script result or logging it, for example.¶ *¶ * RETURNS: (JSON Object)¶ *		Entire error serialized as a JSON object.¶ *¶ * PARAMETERS: none¶ *¶ * DEPENDENCIES: none¶ *¶ */¶```¶¶## [ErrorGetCode.fmfn](ErrorGetCode.fmfn)¶¶```¶/**¶ * ErrorGetCode¶ *¶ * PURPOSE:¶ *		Get error code from a private local variable.¶ *¶ * RETURNS: (number or null)¶ *		Numeric error code, if it exists.¶ *¶ * PARAMETERS: none¶ *¶ * DEPENDENCIES:¶ *		ErrorGetAsJSON¶ *¶ */¶```¶¶## [ErrorGetCustomElement.fmfn](ErrorGetCustomElement.fmfn)¶¶```¶/**¶ * ErrorGetCustomElement ( keyOrPath )¶ *¶ * PURPOSE:¶ *		Get a value from the custom error object stored in a private local variable. This value¶ *		could be set by many of the Error* custom functions, but is likely to be set by Error,¶ *		ErrorIfFmp, ErrorIfApp, or in user code by the ErrorIfSetCustomElement function.¶ *¶ * RETURNS: (any)¶ *		Since the underlying data structure is currently JSON, the return value could be any¶ *		valid JSON type.¶ *¶ * PARAMETERS:¶ *		keyOrPath = (text) the key or path to the JSON element to get¶ *¶ * NOTE:¶ *		Could validate/transform the keyOrPath like ErrorIfSetCustomElement does, but I've chosen¶ *		not to. ErrorIfSetCustomElement has the potential to delete existing data, so it's more¶ *		important to validate the keyOrPath there. It's also more important to be able to save¶ *		the data than it is to retrieve it with this function so nothing is lost (the assumption¶ *		here is that it will be logged).¶ *¶ * DEPENDENCIES:¶ *		ErrorFound, ErrorGetAsJSON¶ *¶ */¶```¶¶## [ErrorGetMessage.fmfn](ErrorGetMessage.fmfn)¶¶```¶/**¶ * ErrorGetMessage¶ *¶ * PURPOSE: (text)¶ *		Get error message a from private local variable.¶ *¶ * RETURNS:¶ *		Text error message, if it exists.¶ *¶ * PARAMETERS: none¶ *¶ * DEPENDENCIES:¶ *		ErrorGetAsJSON¶ *¶ */¶```¶¶## [ErrorGetType.fmfn](ErrorGetType.fmfn)¶¶```¶/**¶ * ErrorGetType¶ *¶ * PURPOSE: (text)¶ *		Get error type a from private local variable.¶ *¶ * RETURNS:¶ *		Text error type, if it exists.¶ *¶ * PARAMETERS: none¶ *¶ * DEPENDENCIES:¶ *		ErrorGetAsJSON¶ *¶ */¶```¶¶## [ErrorIf.fmfn](ErrorIf.fmfn)¶¶```¶/**¶ * ErrorIf ( theCondition ; theType ; theCode ; theMessage )¶ *¶ * PURPOSE:¶ *		Save error information to a private local variable, for use by the suite of Error*¶ *		functions. This should be the only function in the suite to create the error, but¶ *		other functions can call it to create an error with a specific type. User code can¶ *		also call this function to create an error with a custom type.¶ *¶ * RETURNS: (boolean)¶ *		If GetAsBoolean ( theCondition ), then return GetAsBoolean ( theCode )¶ *¶ * PARAMETERS:¶ *		theCondition = (boolean) Error will only be stored if True.¶ *		theType = (text) origin of the error¶ *			(e.g.: \"Fmp\", \"App\", \"Plugin: BaseElements\", \"Module: PluginChecker\", \"API: QBO\", etc.)¶ *		theCode = (number) code for the error¶ *		theMessage = (text) description of the error, preferably human readable, decipherable,¶ *			and in sentence format (ending with a period).¶ *¶ * NOTE:¶ *		This function contains a recommended set of environmental data, but you may choose to add¶ *		or remove from this function as you see fit for your solution. All error generating custom¶ *		functions call this function, so it is the central place to define default environmental¶ *		data collected when an error occurs, as long as it applies to all error types.¶ *¶ *		Environmental data that is likely to change from the time the error occurs to the time log¶ *		data is collected should be included in this function.¶ *¶ * DEPENDENCIES:¶ *		Custom Functions: ErrorGetAsJSON, ErrorIfSetFromJSON¶ *¶ */¶```¶¶## [ErrorIfApp.fmfn](ErrorIfApp.fmfn)¶¶```¶/**¶ * ErrorIfApp ( theCondition ; theCode ; additionalTextInfo )¶ *¶ * PURPOSE:¶ *		Save error information to a private local variable and return a Boolean result.¶ *		This should only be used for Application-specific error codes, as defined by YOU!¶ *		Daniel Smith has added the codes he uses, but you should feel free to add or modify¶ *		these codes to suit your needs. Make sure you don't change any codes after you start¶ *		using this function in your application, though!¶ *¶ * RETURNS: (boolean)¶ *		GetAsBoolean ( theCondition )¶ *¶ * PARAMETERS:¶ *		theCondition = (boolean) Error will only be stored if True.¶ *		theCode = (number) code for the error¶ *		additionalTextInfo = (text, optional) some text describing the particular instance of this error.¶ *			This should help a developer locate where in a script the error occurred.¶ *			(e.g., \"create new invoice record\")¶ *¶ * DEPENDENCIES:¶ *		Custom Functions: ErrorIf, ErrorIfSetCustomElement¶ *¶ */¶```¶¶## [ErrorIfFmp.fmfn](ErrorIfFmp.fmfn)¶¶```¶/**¶ * ErrorIfFmp ( theCode ; additionalTextInfo )¶ *¶ * PURPOSE:¶ *		Save error information to a private local variable and return a Boolean result.¶ *		This should only be used for FileMaker-specific error codes. You will most often want¶ *		to use ErrorIfFmpLastError, but this function is necessary when you use EvaluationError,¶ *		which you should be using every time you use Evaluate.¶ *¶ * RETURNS: (boolean)¶ *		GetAsBoolean ( theCode )¶ *¶ * PARAMETERS:¶ *		theCode = (number) code for a FileMaker error, which is also used as the condition¶ *		additionalTextInfo = (text, optional) some text describing the particular instance of this error.¶ *			With the addition of Get(LastErrorLocation) in FM 19.6.1, this parameter no longer¶ *			has to help a developer locate where in a script the error occurred.¶ *¶ * DEPENDENCIES:¶ *		Custom Functions: ErrorIf, ErrorDescriptionFmp, ErrorIfSetCustomElement¶ *¶ */¶```¶¶## [ErrorIfFmpLastError.fmfn](ErrorIfFmpLastError.fmfn)¶¶```¶/**¶ * ErrorIfFmpLastError ( additionalTextInfo )¶ *¶ * PURPOSE:¶ *		Save error information to a private local variable and return a Boolean result.¶ *		Syntactic sugar for the most common way to check for FileMaker errors.¶ *¶ * RETURNS: (boolean)¶ *		GetAsBoolean ( Get ( LastError ) )¶ *¶ * PARAMETERS:¶ *		additionalTextInfo = (text, optional) some text describing the particular instance of this error.¶ *			With the addition of Get(LastErrorLocation) in FM 19.6.1, this parameter no longer has¶ *			to help a developer locate where in a script the error occurred.¶ *¶ * DEPENDENCIES:¶ *		Custom Functions: ErrorIfFmp¶ *¶ */¶```¶¶## [ErrorIfScriptResult.fmfn](ErrorIfScriptResult.fmfn)¶¶```¶/**¶ * ErrorIfScriptResult ( theScriptName )¶ *¶ * PURPOSE:¶ *		Check for all errors after performing a script that should return JSON with error¶ *		information in a key named \"error\".¶ *¶ * RETURNS: (boolean)¶ *		True for error, otherwise False¶ *¶ * PARAMETERS:¶ *		theScriptName = (text, optional) name of the script just performed¶ *¶ * DEPENDENCIES:¶ *		Custom Functions: ErrorIfFmpLastError, ErrorIfApp, ErrorIfSetFromJSON,¶ *			ErrorIfSetCustomElement, ErrorGetCustomElement¶ *¶ */¶```¶¶## [ErrorIfSetCustomElement.fmfn](ErrorIfSetCustomElement.fmfn)¶¶```¶/**¶ * ErrorIfSetCustomElement ( keyOrPath ; value ; jsonType )¶ *¶ * PURPOSE:¶ *		Set a custom value in the error object stored in a private local variable.¶ *¶ *¶ * RETURNS: (boolean)¶ *		True if an error was stored, which also means it added data to the error.¶ *		False if an error was NOT stored, wich also means it did NOT add data to the error.¶ *¶ * PARAMETERS:¶ *		keyOrPath = (text) the key or path to the JSON element to get¶ *			SHOULD NOT start with \"_invalidKeys\",¶ *			which is a reserved key where values with invalid keys are stored.¶ *		value = the value to set¶ *		jsonType = should be one of the valid types like JSONString¶ *¶ * NOTE:¶ *		It is recommended to document values that are commonly set by this function in your¶ *		system. For example, I use these values:¶ *			dialog.title = (string) If set, will override the default custom dialog title.¶ *			dialog.message = (string) If set, will override the default custom dialog message.¶ *			dialog.shown = (boolean) If true, dialog has been shown to the user.¶ *			logLevel = (int) If set, this log level will be used instead of the default.¶ *¶ * DEPENDENCIES:¶ *		ErrorFound, ErrorGetAsJSON, ErrorIfSetFromJSON¶ *¶ */¶```¶¶## [ErrorIfSetFromJSON.fmfn](ErrorIfSetFromJSON.fmfn)¶¶```¶/**¶ * ErrorIfSetFromJSON ( theErrorObject )¶ *¶ * PURPOSE:¶ *		Allows for loading or clearing an error in these function's internal format from a JSON object.¶ *		Use to evaluate an error returned in a script result, for example.¶ *¶ * RETURNS: (boolean)¶ *		Code contained in theErrorData as a Boolean. In other words, if any error¶ *		occurred at all, return True (1), otherwise return False (0).¶ *¶ * PARAMETERS:¶ *		theErrorObject = (JSON Object) value returned from ErrorGetAsJSON. It is NOT recommended¶ *			to create an error object manually and pass in to this function.¶ *¶ * DEPENDENCIES:¶ *	ErrorFound¶ *¶ */¶```¶"
	;
	type = /* FAQ about types, with links removed (copy the rendered markdown) */
		"Why should I care about the \"type\" of an error?¶¶Every error was generated by some code. The type tells you who owns that code. If you can imagine a world without error types (difficult, I know!) then error code 401 means No records match the request, right? Well, HTTP status codes would disagree and call that Unauthorized, so who's right? Both! as long as you save the type of error, so you can make sense of the error code."
	;
	url = "https://github.com/dansmith65/FileMaker-Error-Handling"
] ;
	Case (
		emptyOrTopic = "app" ; app ;
		emptyOrTopic = "functions" ; functions ;
		emptyOrTopic = "type" ; type ;
		emptyOrTopic = "url" ; url ;

		/* else: default/general help */
		If ( emptyOrTopic ≠ "" ;
			"Invalid parameter, showing general help instead...¶¶"
		)
			& "Minimal in-app help for this suite of custom functions¶"
			& "------------------------------------------------------"
			& "¶¶Valid values for the parameter to this help function are:"
			& "¶	app:		list of app errors"
			& "¶	functions:	minimal script header from all functions"
			& "¶	type:		FAQ about types"
			& "¶	url:		link to full documentation"
			& "¶¶Full documentation can be found at:¶	" & url
			& "¶¶¶" & shortSummary
	)
)
