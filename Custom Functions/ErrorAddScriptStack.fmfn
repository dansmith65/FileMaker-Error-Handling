/**
 * =====================================
 * ErrorAddScriptStack ( errorData ; additionalData )
 *
 * RETURNS:
 *		(string) Let format dictionary containing the errorData from the
 *			parameter, with a modified scriptStack entry
 *
 * PARAMETERS:
 *		errorData = (string) Let format dictionary
 *
 * DEPENDENCIES:
 *		Custom Functions: #, #Get, #Remove
 *
 * HISTORY:
 *		MODIFIED on 2019-MAY-30 Daniel Smith dansmith65@gmail.com
 *			- forked ErrorAddScriptStack function to work with error in JSON format
 *		MODIFIED on 2014-AUG-29 Daniel Smith dansmith65@gmail.com
 *			- start stack with the script that generated the error
 *		MODIFIED on 2014-JAN-30 Daniel Smith dansmith65@gmail.com
 *			- add additionalData parameter
 *		CREATED on 2014-JAN-29 Daniel Smith dansmith65@gmail.com
 * =====================================
 */

JSONSetElement ( errorData ; "scriptStack" ;
	List (
		Get ( ScriptName )
			& If ( not IsEmpty ( additionalData ) ;
				" " & Quote ( additionalData )
			)
		;
		Let (
			~scriptStack = JSONGetElement ( errorData ; "scriptStack" ) ;
			If ( IsEmpty ( ~scriptStack ) ;
				/* start the stack with the script that generated the error */
				JSONGetElement ( errorData ; "ScriptName" ) ;
				/* else: append previous stack */
				~scriptStack
			)
		)
	)
; JSONString )