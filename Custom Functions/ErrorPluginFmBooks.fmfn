/**
 * =====================================
 * ErrorPluginFmBooks ( thePlugInResult ; theErrorInfo )
 *
 * RETURNS:
 *		Let Notation containing information about the last plugin
 *		error and the environment it occurred in.
 *
 * PARAMETERS:
 *		thePlugInResult = (text) result of the plugin call
 *		theErrorInfo = (text, optional) some text describing the particular
 *			instance of this error. This should help a developer locate where
 *			in a script the error occured.
 *			(e.g., "create new invoice record")
 *
 * DEPENDENCIES:
 *		Custom Functions: #, Error
 *		Plugin: FM Books Connector
 *
 * HISTORY:
 *		MODIFIED on 2013-DEC-04 Daniel Smith dansmith65@gmail.com
 *			- fix value of code returned (was previously offset by -1)
 *		MODIFIED on 2013-NOV-29 Daniel Smith dansmith65@gmail.com
 *			- fix extraction of description from SGetStatus
 *		CREATED on 2013-NOV-25 Daniel Smith dansmith65@gmail.com
 *
 * REFERENCES:
 *		http://filemakerstandards.org/x/AoA-/
 * =====================================
 */

Let ( [
	// Cache this value so the plugin does not need to be called multiple times.
	// The main reason for doing this is if the plugin is expired, it will show a dialog
	// on every call to the plugin.
	~SGetStatus =
		If ( PCQB_GetOperatingMode = "EXPIRED" ;
			thePlugInResult ;
			PCQB_SGetStatus
		)
	;
	~isError =
		thePlugInResult = "!!ERROR!!"
		or thePlugInResult = "?"
		or PCQB_GetOperatingMode = "EXPIRED"
	;
	~code = If ( ~isError ;
		Let ( [
			~start = Position ( ~SGetStatus ; "CODE: " ; 1 ; 1 ) + 6 ;
			~end = Position ( ~SGetStatus ; "¶" ; ~start ; 1 )
		] ;
			GetAsNumber ( Middle ( ~SGetStatus ; ~start ; ~end - ~start ) )
		)
	) ;
	~description = If ( ~isError ;
		Let ( [
			~start = Position ( ~SGetStatus ; "MESSAGE: " ; 1 ; 1 ) + 9 ;
			~end = Position ( ~SGetStatus ; "¶" ; ~start ; 1 ) ;
			~end = If ( ~end ; ~end ; Length ( ~SGetStatus ) + 1 )
		] ;
			Middle ( ~SGetStatus ; ~start ; ~end - ~start )
		)
	) ;
	~theErrorCode =
		Case (
		// no error
			not ~isError ;
			0 ;
		// plug-in not installed
			~SGetStatus = "?" ;
			10000 ;
		// plug-in not registered
			PCQB_GetOperatingMode = "EXPIRED" ;
			10001 ;
		// code was extracted from plugin
			~code ;
			~code ;
		// else, use "unknown" code
			-1
		)
	;
	~errorDescription =
		Case (
			~theErrorCode = -1 ;		"Unknown error" ;
			~theErrorCode = 0 ;		"No error" ;
			~theErrorCode = 10000 ;		"FM Books Connector plug-in is not installed" ;
			~theErrorCode = 10001 ;		~SGetStatus ;
			not IsEmpty ( ~description ) ;		~description ;
		// else
			~SGetStatus
		)
] ;
	Error ( "Plugin: FmBooks" ; ~theErrorCode ; ~errorDescription ; theErrorInfo )
	& If ( ~isError ;
		# ( "plugInResult" ; thePlugInResult )
		& # ( "PCQB_SGetStatus" ; ~SGetStatus )
		& # ( "PCQB_GetOperatingMode" ; PCQB_GetOperatingMode )
		& # ( "PCQB_Version" ; PCQB_Version ( "Long" ) )
		& If ( ~theErrorCode ≠ 10001 ;
			# ( "PCQB_GetCurrentFileName" ; PCQB_GetCurrentFileName )
		)
	)
)